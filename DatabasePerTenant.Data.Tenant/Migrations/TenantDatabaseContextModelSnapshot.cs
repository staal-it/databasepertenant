// <auto-generated />
using System;
using DatabasePerTenant.Data.Tenant;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabasePerTenant.Data.Tenant.Migrations
{
    [DbContext(typeof(TenantDatabaseContext))]
    partial class TenantDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.HasSequence<int>("SalesOrderNumber", "SalesLT");

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CountryRegion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_Address_rowguid");

                    b.HasIndex("StateProvince");

                    b.HasIndex("AddressLine1", "AddressLine2", "City", "StateProvince", "PostalCode", "CountryRegion");

                    b.ToTable("Address", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.BuildVersion", b =>
                {
                    b.Property<byte>("SystemInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("SystemInformationID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatabaseVersion")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Database Version");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("datetime");

                    b.HasKey("SystemInformationId")
                        .HasName("PK__BuildVer__35E58ECA51EE95D3");

                    b.ToTable("BuildVersion");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyName")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("NameStyle")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SalesPerson")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Suffix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("CustomerId");

                    b.HasIndex("EmailAddress");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_Customer_rowguid");

                    b.ToTable("Customer", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("AddressID");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("CustomerId", "AddressId")
                        .HasName("PK_CustomerAddress_CustomerID_AddressID");

                    b.HasIndex("AddressId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_CustomerAddress_rowguid");

                    b.ToTable("CustomerAddress", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ErrorLogID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ErrorLine")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("ErrorNumber")
                        .HasColumnType("int");

                    b.Property<string>("ErrorProcedure")
                        .HasMaxLength(126)
                        .HasColumnType("nvarchar(126)");

                    b.Property<int?>("ErrorSeverity")
                        .HasColumnType("int");

                    b.Property<int?>("ErrorState")
                        .HasColumnType("int");

                    b.Property<DateTime>("ErrorTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ErrorLogId");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID");

                    b.Property<int?>("ProductModelId")
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Size")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.Property<byte[]>("ThumbNailPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("ProductId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_Product_Name");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ProductModelId");

                    b.HasIndex("ProductNumber")
                        .IsUnique()
                        .HasDatabaseName("AK_Product_ProductNumber");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_Product_rowguid");

                    b.ToTable("Product", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ParentProductCategoryID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductCategoryId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductCategory_Name");

                    b.HasIndex("ParentProductCategoryId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductCategory_rowguid");

                    b.ToTable("ProductCategory", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductDescriptionID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductDescriptionId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductDescription_rowguid");

                    b.ToTable("ProductDescription", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.ProductModel", b =>
                {
                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelId");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductModel_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductModel_rowguid");

                    b.ToTable("ProductModel", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.ProductModelProductDescription", b =>
                {
                    b.Property<int>("ProductModelId")
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID");

                    b.Property<int>("ProductDescriptionId")
                        .HasColumnType("int")
                        .HasColumnName("ProductDescriptionID");

                    b.Property<string>("Culture")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .IsFixedLength(true);

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelId", "ProductDescriptionId", "Culture")
                        .HasName("PK_ProductModelProductDescription_ProductModelID_ProductDescriptionID_Culture");

                    b.HasIndex("ProductDescriptionId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductModelProductDescription_rowguid");

                    b.ToTable("ProductModelProductDescription", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID");

                    b.Property<int>("SalesOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderDetailID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric(38,6)")
                        .HasComputedColumnSql("(isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0)))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPriceDiscount")
                        .HasColumnType("money");

                    b.HasKey("SalesOrderId", "SalesOrderDetailId")
                        .HasName("PK_SalesOrderDetail_SalesOrderID_SalesOrderDetailID");

                    b.HasIndex("ProductId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesOrderDetail_rowguid");

                    b.ToTable("SalesOrderDetail", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SalesOrderID")
                        .HasDefaultValueSql("(NEXT VALUE FOR [SalesLT].[SalesOrderNumber])");

                    b.Property<string>("AccountNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("BillToAddressId")
                        .HasColumnType("int")
                        .HasColumnName("BillToAddressID");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreditCardApprovalCode")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("OnlineOrderFlag")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte>("RevisionNumber")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasComputedColumnSql("(isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID],(0)),N'*** ERROR ***'))");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ShipMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ShipToAddressId")
                        .HasColumnType("int")
                        .HasColumnName("ShipToAddressID");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))");

                    b.HasKey("SalesOrderId")
                        .HasName("PK_SalesOrderHeader_SalesOrderID");

                    b.HasIndex("BillToAddressId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesOrderHeader_rowguid");

                    b.HasIndex("SalesOrderNumber")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesOrderHeader_SalesOrderNumber");

                    b.HasIndex("ShipToAddressId");

                    b.ToTable("SalesOrderHeader", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.VGetAllCategories", b =>
                {
                    b.Property<string>("ParentProductCategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProductCategoryId")
                        .HasColumnType("int")
                        .HasColumnName("ProductCategoryID");

                    b.Property<string>("ProductCategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("vGetAllCategories", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.VProductAndDescription", b =>
                {
                    b.Property<string>("Culture")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .IsFixedLength(true);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<string>("ProductModel")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToView("vProductAndDescription", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.VProductModelCatalogDescription", b =>
                {
                    b.Property<string>("BikeFrame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Copyright")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Crankset")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("MaintenanceDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NoOfYears")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Pedal")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PictureAngle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PictureSize")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ProductLine")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ProductModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductModelID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductPhotoId")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ProductPhotoID");

                    b.Property<string>("ProductUrl")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("ProductURL");

                    b.Property<string>("RiderExperience")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid>("Rowguid")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid");

                    b.Property<string>("Saddle")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Style")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WarrantyDescription")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("WarrantyPeriod")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Wheel")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.ToView("vProductModelCatalogDescription", "SalesLT");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.CustomerAddress", b =>
                {
                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.Address", "Address")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("AddressId")
                        .IsRequired();

                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.Customer", "Customer")
                        .WithMany("CustomerAddress")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.Product", b =>
                {
                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.ProductCategory", "ProductCategory")
                        .WithMany("Product")
                        .HasForeignKey("ProductCategoryId");

                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.ProductModel", "ProductModel")
                        .WithMany("Product")
                        .HasForeignKey("ProductModelId");

                    b.Navigation("ProductCategory");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.ProductCategory", b =>
                {
                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.ProductCategory", "ParentProductCategory")
                        .WithMany("InverseParentProductCategory")
                        .HasForeignKey("ParentProductCategoryId")
                        .HasConstraintName("FK_ProductCategory_ProductCategory_ParentProductCategoryID_ProductCategoryID");

                    b.Navigation("ParentProductCategory");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.ProductModelProductDescription", b =>
                {
                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.ProductDescription", "ProductDescription")
                        .WithMany("ProductModelProductDescription")
                        .HasForeignKey("ProductDescriptionId")
                        .IsRequired();

                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.ProductModel", "ProductModel")
                        .WithMany("ProductModelProductDescription")
                        .HasForeignKey("ProductModelId")
                        .IsRequired();

                    b.Navigation("ProductDescription");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.SalesOrderDetail", b =>
                {
                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.Product", "Product")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("ProductId")
                        .IsRequired();

                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.SalesOrderHeader", "SalesOrder")
                        .WithMany("SalesOrderDetail")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.SalesOrderHeader", b =>
                {
                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.Address", "BillToAddress")
                        .WithMany("SalesOrderHeaderBillToAddress")
                        .HasForeignKey("BillToAddressId")
                        .HasConstraintName("FK_SalesOrderHeader_Address_BillTo_AddressID");

                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.Customer", "Customer")
                        .WithMany("SalesOrderHeader")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("DatabasePerTenant.Data.Tenant.Models.Address", "ShipToAddress")
                        .WithMany("SalesOrderHeaderShipToAddress")
                        .HasForeignKey("ShipToAddressId")
                        .HasConstraintName("FK_SalesOrderHeader_Address_ShipTo_AddressID");

                    b.Navigation("BillToAddress");

                    b.Navigation("Customer");

                    b.Navigation("ShipToAddress");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.Address", b =>
                {
                    b.Navigation("CustomerAddress");

                    b.Navigation("SalesOrderHeaderBillToAddress");

                    b.Navigation("SalesOrderHeaderShipToAddress");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.Customer", b =>
                {
                    b.Navigation("CustomerAddress");

                    b.Navigation("SalesOrderHeader");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.Product", b =>
                {
                    b.Navigation("SalesOrderDetail");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.ProductCategory", b =>
                {
                    b.Navigation("InverseParentProductCategory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.ProductDescription", b =>
                {
                    b.Navigation("ProductModelProductDescription");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.ProductModel", b =>
                {
                    b.Navigation("Product");

                    b.Navigation("ProductModelProductDescription");
                });

            modelBuilder.Entity("DatabasePerTenant.Data.Tenant.Models.SalesOrderHeader", b =>
                {
                    b.Navigation("SalesOrderDetail");
                });
#pragma warning restore 612, 618
        }
    }
}
